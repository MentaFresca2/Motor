#version 460 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos; 

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};  //Defino un objeto donde guardar las propiedades de los materiales
  struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
}; //Defino un objeto donde guardar luces



//Uniformes
uniform Material material; //Creo el objeto
uniform Light light;  
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform vec3 viewPos;

void main()
{
	//Ambiente
	vec3 ambient  = light.ambient * material.ambient;

	//Mexcla de texturas
	vec4 TexColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);

	//Calculo de la luz diffusora
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);  
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse  = light.diffuse * (diff * material.diffuse);

	//Calculo del reflejo especular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	if (dot(reflectDir, norm) < 0.0)
		reflectDir = vec3(0.0);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess); //El 32 es la cantidad que se concentral a luz especular
	vec3 specular = light.specular * (spec * material.specular);  

	vec3 result = (ambient + diffuse + specular) * TexColor.rgb;
	FragColor = vec4(result, 1.0);
}
