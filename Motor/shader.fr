#version 460 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos; 

struct Material {
    sampler2D diffuse;
    sampler2D specular;    
    float     shininess;
};  //Defino un objeto donde guardar las propiedades de los materiales
  struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
}; //Defino un objeto donde guardar luces



//Uniformes
uniform Material material; //Creo el objeto
uniform Light light;  
uniform vec3 viewPos;

void main()
{
	//Ambiente
	vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoord));


	//Calculo de la luz diffusora
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);  
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoord));  

	//Calculo del reflejo especular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	if (dot(reflectDir, norm) < 0.0)
		reflectDir = vec3(0.0);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess); //El 32 es la cantidad que se concentral a luz especular
	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord)); //Solo aplico el especular a la textura especular, porque abajo
	//Esto es hace para asignar a diferentes posiciones diferentes materiales de luz, en este caso he aplicado borde metalico
	//como = Cuanto ms blanco es la imagen mas especular tiene, como el centro es negro en esta textura, no tiene nada de especular en el centro que es la parte de madera

	vec3 result = (ambient + diffuse + specular);
	FragColor = vec4(ambient + diffuse + specular, 1.0);   
}
