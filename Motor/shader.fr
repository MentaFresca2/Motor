#version 460 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;  
//Uniformes
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform vec3 lightColor;
uniform vec3 lightPos;  
uniform vec3 viewPos;
void main()
{
	//Fuerza de reflejo
	float specularStrength = 0.5;
	//Ambiente
	float AmbientFactor = 0.1;
	vec3 ambient = AmbientFactor * lightColor;

	//Mexcla de texturas
	vec4 TexColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);

	//Calculo de la luz diffusora
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);  
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	//Calculo del reflejo especular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm); 
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); //El 32 es la cantidad que se concentral a luz especular
	vec3 specular = specularStrength * spec * lightColor;  

	vec3 result = (ambient + diffuse + specular) * TexColor.rgb;
	FragColor = vec4(result, 1.0);
}
